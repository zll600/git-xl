name: Manual Windows Build

on:
  # Trigger manually from GitHub Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2025
    steps:
    - uses: actions/checkout@v4
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
    - name: Set up Python
      run: uv python install 3.13
    - name: Set version string
      shell: bash
      run: |
        if [ ${GITHUB_REF::9} = "refs/tags" ]; then
          version_string=${GITHUB_REF:10}
        else
          version_string=${GITHUB_SHA::7}
        fi;
        echo "VERSION_STRING=$(echo $version_string)" >> $GITHUB_ENV
    - name: Get Certificate
      id: write_file
      uses: timheuer/base64-to-file@604a8926a81a2da120d09b06bb76da9bba5aee6e
      with:
        fileName: 'cert.p12'
        encodedString: ${{ secrets.CODESIGN_CERTIFICATE }}
    - name: Set PATH for signtool
      shell: bash
      run: echo "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64" >> $GITHUB_PATH
    - name: Install Python dependencies
      run: |
        uv sync
    - name: tests
      run: |
        uv run python -m unittest discover src -vv
    - name: Build Python Package
      run: |
        uv run python .\scripts\windows\update-version-info.py
        uv run pyinstaller --onefile .\src\diff.py --name git-xl-diff-x64.exe --version-file .\scripts\windows\git-xl-version-info.py --icon .\scripts\windows\git-xl-logo.ico
        mv dist\git-xl-diff-x64.exe git-xl-diff-x64.exe
        uv run pyinstaller --onefile .\src\cli.py --name git-xl-x64.exe --version-file .\scripts\windows\git-xl-version-info.py --icon .\scripts\windows\git-xl-logo.ico
        mv dist\git-xl-x64.exe git-xl-x64.exe
    - name: Sign exes and build installer
      run: |
        signtool sign /f ${{ steps.write_file.outputs.filePath }} /p ${{ secrets.CODESIGN_PASSWORD }} /tr http://timestamp.sectigo.com /td sha256 /fd SHA256 git-xl-*.exe
        iscc scripts\windows\inno-setup-git-xl-installer.iss
        if ($env:GITHUB_REF_TYPE -eq "tag"){
          mv git-xl-windows-$env:VERSION_STRING.exe dist\git-xl-windows-$env:VERSION_STRING.exe
        } else {
          mv git-xl-windows-0.0.0.exe dist\git-xl-windows-$env:VERSION_STRING.exe
        }
        signtool sign /f ${{ steps.write_file.outputs.filePath }} /p ${{ secrets.CODESIGN_PASSWORD }} /tr http://timestamp.sectigo.com /td sha256 /fd SHA256 dist\git-xl-windows-$env:VERSION_STRING.exe
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: dist
    - name: Upload Windows Installer to GitHub Release Page
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: dist/git-xl-windows-${{ env.VERSION_STRING }}.exe
        asset_name: git-xl-windows-${{ env.VERSION_STRING }}.exe
        asset_content_type: application/zip
    - name: Trigger Netlify webhook
      if: github.event_name == 'release'
      shell: bash
      run: |
        
        curl -X POST -d {} https://api.netlify.com/build_hooks/$NETLIFY_BUILD_HOOK
      env:
        NETLIFY_BUILD_HOOK: ${{ secrets.NETLIFY_BUILD_HOOK }}
